test = strptime(time_call[1], "%m/%d/%Y %H:%M:%OS")
test
test2 = strptime(time_arrive[1], "%m/%d/%Y %H:%M:%OS")
test2
time_arrive = building_fire$ARRIVAL_DATE_TIME
test2 = strptime(time_arrive[1], "%m/%d/%Y %H:%M:%OS")
test2
test2 - test
test
time_call[1]
time_arrive[1]
test
test2
test2 - test
test - test2
test = strptime(time_call[1], "%m-%d-%Y %H:%M:%OS")
test
test = strptime(time_call[1], "%m/%d/%Y %I:%M:%OS", "EST")
test
test2 = strptime(time_arrive[1], "%m/%d/%Y %I:%M:%OS")
test2 - test
View(time_arrive)
test = strptime(time_arrive[9], "%m/%d/%Y %I:%M%OS")
test
test = strptime(time_arrive[9], "%m/%d/%Y %r:%M%OS")
test
test = strptime(time_arrive[9], "%m/%d/%Y %I:%M%S%r")
test
test = strptime(time_arrive[9], "%m/%d/%Y %I:%M%S")
test
test = strptime(time_arrive[9], "%m/%d/%Y %I:%M:%OS", "EST")
test
test = strptime(time_arrive[9], "%m/%d/%Y %I:%M:%OS%r", "EST")
test
test = strptime(time_arrive[9], "%m/%d/%Y %r:%M:%OS", "EST")
test
test = strptime(time_arrive[9], "%m/%d/%Y %I:%M:%OS", "EST")
test = strptime(time_arrive[77], "%m/%d/%Y %I:%M:%OS", "EST")
test
test2 = strptime(time_call[77], "%m/%d/%Y %I:%M:%OS", "EST")
test2
test - test2
test2 = strptime(time_call[77], "%m/%d/%Y %I:%M:%OS %p", "EST")
test2
test
test = strptime(time_arrive[77], "%m/%d/%Y %I:%M:%OS %p", "EST")
test - test2
test = strptime(time_arrive[5], "%m/%d/%Y %I:%M:%OS %p", "EST")
test
View(rbind(time_call, time_arrive))
View(cbind(time_call, time_arrive))
test = strptime(time_call[1], "%m/%d/%Y %I:%M:%OS %p", "EST")
test = strptime(time_arrive[1], "%m/%d/%Y %I:%M:%OS %p", "EST")
test = strptime(time_call[1], "%m/%d/%Y %I:%M:%OS %p", "EST")
test2 = strptime(time_arrive[1], "%m/%d/%Y %I:%M:%OS %p", "EST")
test
test1
test2
test2 - test1
test2 - test
time_call = building_fire$INCIDENT_DATE_TIME
time_call = strptime(time_call, "%m/%d/%Y %I:%M:%OS %p", "EST")
time_arrive = building_fire$ARRIVAL_DATE_TIME
time_arrive = strptime(time_arrive, "%m/%d/%Y %I:%M:%OS %p", "EST")
diffs = time_arrive-time_call
View(diffs)
diffs = difftime(time_arrive,time_call, units="minutes")
diffs = difftime(time_arrive,time_call, units="mins")
View(diffs)
quantile(diffs)
diffs = diffs[which(!is.na(diffs))]
quantile(diffs)
diffs[which(diffs < 0)]
which(diffs < 0)
cbind(time_call[5104], time_arrive[5104])
View(cbind(time_call[5104], time_arrive[5104]))
View(c(time_call[5104], time_arrive[5104]))
time_call[5104]
time_arrive[5104]
time_call[5104] - time_arrive[5104]
time_arrive[5104] - time_call[5104]
diffs[5104]
View(diffs)
diffs = difftime(time_arrive,time_call, units="mins")
diffs[which(diffs < 0)]
which(diffs < 0)
time_arrive[5111]
time_call[5111]
building_fire[5111,]
View(building_fire[5111,])
diffs = diffs[which(!diffs[5111])]
weird = diffs[5111]
weird
diffs = diffs[which(diffs ! %in% weird)]
diffs = diffs[which(diffs not %in% weird)]
diffs = diffs[which(diffs != weird)]
diffs = diffs[which(!is.na(diffs))]
quantile(diffs)
# When do people cook?
cook_fire = fdny[which(fdny$INCIDENT_TYPE_DESC == "113 - Cooking fire, confined to container"),]
cook_times = strptime(cook_times, "%m/%d/%Y %I:%M %p", "EST")
cook_times = cook_fire$INCIDENT_DATE_TIME
cook_times = strptime(cook_times, "%m/%d/%Y %I:%M %p", "EST")
View(cook_times)
cook_times[1]
cook_times[2]
cook_times[3]
cook_times = cook_fire$INCIDENT_DATE_TIME
cook_times = strptime(cook_times, "%m/%d/%Y %I:%M:OS %p", "EST")
cook_times[1]
cook_times = cook_fire$INCIDENT_DATE_TIME
cook_times[1]
cook_times = strptime(cook_times, "%m/%d/%Y %I:%M:OS %p", "EST")
cook_times[1]
cook_times[2]
time_arrive = building_fire$ARRIVAL_DATE_TIME
time_arrive = strptime(time_arrive, "%m/%d/%Y %I:%M:%OS %p", "EST")
time_arrive[1]
cook_times = cook_fire$INCIDENT_DATE_TIME
cook_times = strptime(cook_times, "%m/%d/%Y %I:%M:%OS %p", "EST")
cook_times[1]
format(round(cooktimes[1:10], units="hours"), format="%I:%M:%OS")
format(round(cook_times[1:10], units="hours"), format="%I:%M:%OS")
?round
cook_times[1]
format(cook_times[1], format="%I")
format(cook_times[1], format="%I %p")
View(cook_times)
cook_times[1:100]
format(cook_times[1], format="%H")
format(cook_times[18], format="%H")
View(cook_fire[18,])
cook_times = format(cook_times, format="%H")
all_times = unique(cook_times)
count_cooks = c()
for(i in 1:length(cook_times)) {
current = all_times[i]
count_cooks[i] = length(cook_times[which(cook_times == current)])
}
names(count_cooks) = all_times
proportions = count_cooks / length(cook_fire)
View(proportions)
count_cooks = c()
for(i in 1:length(all_times)) {
current = all_times[i]
count_cooks[i] = length(cook_times[which(cook_times == current)])
}
names(count_cooks) = all_times
proportions = count_cooks / length(cook_fire)
View(proportions)
max(proportions)
names(max(proportions))
names(proportions)[which(proportions == max(proportions))]
View(count_cooks)
quantile(diffs)
props
# proportional value for most common incident type.
props[which(names(props) == names(counts)[which(counts == max(counts))])]
# proportional value for most common incident type.
p = props[which(names(props) == names(counts)[which(counts == max(counts))])]
p
max(proportions)
p = max(proportions)
all_incidents = strptime(fdny$INCIDENT_DATE_TIME, "%m/%d/%Y %I:%M:%OS %p", "EST")
all_incidents = format(all_incidents, format="%H")
all_incidents[1]
for(i in 1:length(all_times)) {
current = all_times[i]
all_counts_by_hour[i] = length(all_incidents[which(all_incidents == current)])
}
all_counts_by_hour = c()
for(i in 1:length(all_times)) {
current = all_times[i]
all_counts_by_hour[i] = length(all_incidents[which(all_incidents == current)])
}
proportions = count_cooks / all_counts_by_hour
max(proportions)
p = max(proportions)
p
names(p) = all_times
names(proportions) = all_times
p = max(proportions)
p
names(p)
p = proportions[which(proportions == max(proportions))]
p
library(readr)
zip_pop <- read_csv("D:/Dropbox/TDI/Data Sets/Challenge/2010+Census+Population+By+Zipcode+(ZCTA).csv")
View(zip_pop)
fdny_zips = fdny$ZIP_CODE[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire")]
fdny_zips
zips = zip_pop[which(fdny_zips %in% zip_pop)]
zips
Viewp(zips)
View(zips)
zips = zip_pop[which(fdny_zips %in% zip_pop),]
zips = zip_pop[which(fdny_zips %in% zip_pop$`Zip Code ZCTA`),]
View(zips)
View(fdny_zips)
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fires_per_zip = c()
pop_in_zip = c()
#incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = length(fire_zips[which(fire_zips == current)])
pop_zip = zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == current)]
}
names(fires_per_zip) = fdny_zips
combined = cbind(fires_per_zip, pop_zip)
View(combined)
fdny_zips
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = length(incidents[which(incidents$ZIP_CODE == current)])
pop_zip = zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == current)]
}
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = length(incidents[which(incidents$ZIP_CODE == current),])
pop_zip = zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == current)]
}
names(fires_per_zip) = fdny_zips
combined = cbind(fires_per_zip, pop_zip)
View(combined)
combined = rbind(fires_per_zip, pop_zip)
View(fires_per_zip)
fdny_zips
fdny_zips[q]
fdny_zips[1]
length(incidents[which(incidents$ZIP_CODE == fdny_zips[1]),])
length(incidents[which(incidents$ZIP_CODE == fdny_zips[2]),])
length(incidents[which(incidents$ZIP_CODE == fdny_zips[3]),])
nrow(incidents[which(incidents$ZIP_CODE == fdny_zips[3]),])
length(cook_times[which(cook_times == all_times[2])])
length(cook_times[which(cook_times == all_times[3])])
length(fdny$INCIDENT_TYPE_DESC[which(fdny$INCIDENT_TYPE_DESC == incident_types[1])])
length(fdny$INCIDENT_TYPE_DESC[which(fdny$INCIDENT_TYPE_DESC == incident_types[2])])
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = nrow(incidents[which(incidents$ZIP_CODE == current),])
pop_zip = zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == current)]
}
names(fires_per_zip) = fdny_zips
combined = cbind(fires_per_zip, pop_zip)
View(combined)
zips
View(zips)
zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == fdny_zips[1])]
zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == fdny_zips[2])]
zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == fdny_zips[3])]
View(pop_zip)
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = nrow(incidents[which(incidents$ZIP_CODE == current),])
pop_zip[i] = zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == current)]
}
which(!(fdny_zips %in% zips$`Zip Code ZCTA`))
fdny_zips = fdny$ZIP_CODE[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire")]
zips = zip_pop[which(fdny_zips %in% zip_pop$`Zip Code ZCTA`),]
which(!(fdny_zips %in% zips$`Zip Code ZCTA`))
zip_pop[55,]
fdny_zips[which(fdny_zips == 01088)]
class(fdny_zips)
class(zip_pop$`Zip Code ZCTA`)
zips = zip_pop[which(fdny_zips %in% as.numeric(zip_pop$`Zip Code ZCTA`)),]
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = nrow(incidents[which(incidents$ZIP_CODE == current),])
pop_zip[i] = zips$`2010 Census Population`[which(zips$`Zip Code ZCTA` == current)]
}
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
for(i in 1:length(fdny_zips)) {
current = fdny_zips[i]
fires_per_zip[i] = nrow(incidents[which(incidents$ZIP_CODE == current),])
pop_zip[i] = zips$`2010 Census Population`[which(as.numeric(zips$`Zip Code ZCTA`) == current)]
}
which(!(fdny_zips %in% zips$`Zip Code ZCTA`))
zip_pop$`Zip Code ZCTA` = as.numeric(zip_pop$`Zip Code ZCTA`)
class(zip_pop$`Zip Code ZCTA`)
zips = zip_pop[which(fdny_zips %in% zip_pop$`Zip Code ZCTA`),]
which(!(fdny_zips %in% zips$`Zip Code ZCTA`))
zip_pop$`Zip Code ZCTA`[55]
1088 %in% fdny_zips
zips = zip_pop[which(zip_pop$`Zip Code ZCTA` %in% fdny_zips),]
which(!(fdny_zips %in% zips$`Zip Code ZCTA`))
class(fdny_zips)
class(zip_pop$`Zip Code ZCTA`)
class(zip_pop)
names(zip_pop) = c("zip", "pop")
fdny_zips = fdny$ZIP_CODE[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire")]
zip_pop$zip = as.numeric(zip_pop$zip)
zips = zip_pop[which(fdny_zips %in% zip_pop$zip),]
which(!(fdny_zips %in% zips$`Zip Code ZCTA`))
which(!(fdny_zips %in% zips$zip))
fdny_zips[55]
zips$zip[55]
1092 %in% fdny_zips
length(fdny_zips)
fdny_zips = fdny_zips(which(fdny_zips %in% zip_pop$zip))
fdny_zips = fdny_zips[which(fdny_zips %in% zip_pop$zip)]
length(fdny_zips)
fdny_zips = fdny$ZIP_CODE[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire")]
zip_pop$zip = as.numeric(zip_pop$zip)
fdny_zips = fdny_zips[which(fdny_zips %in% zip_pop$zip)]
fires_per_zip = c()
pop_in_zip = c()
incidents = fdny[which(fdny$INCIDENT_TYPE_DESC == "111 - Building fire"),]
fire_zips = unique(fdny_zips)
fire_zips = unique(fdny_zips)
for(i in 1:length(fire_zips)) {
current = fire_zips[i]
fires_per_zip[i] = nrow(incidents[which(incidents$ZIP_CODE == current),])
pop_zip[i] = zips$pop[which(as.numeric(zips$zip) == current)]
}
names(fires_per_zip) = fdny_zips
names(fires_per_zip) = fire_zips
combined = cbind(fires_per_zip, pop_zip)
View(combined)
zip_pop$pop[which(zip_pop$zip == 11219)]
?PLM
?plm
??plm
install.packages("plm")
plm
library(plm)
install.packages("plm")
library(plm)
combined$fires_per_zip
class(combined)
combined = as.data.frame(combined)
combined$fires_per_zip
p = plm(combined$fires_per_zip ~ combined$pop_zip)
p = plm(combined$fires_per_zip ~ combined$pop_zip, combined)
r.squared(p)
p = plm(fires_per_zip ~ pop_zip, combined)
r.squared(p)
p = 0
p = plm(fires_per_zip ~ pop_zip, combined)
lm
lm(fires_per_zip ~ pop_zip, combined)
l = lm(fires_per_zip ~ pop_zip, combined)
r.squared(l)
summary(l)
l = lm(combined$fires_per_zip ~ combined$pop_zip, combined)
summary(l)
coeff(l)
coefficients(l)
summary(l)$r.squared
fdny[which(!is.na(fdny$CO_DETECTOR_PRESENT_DESC))]
fdny[which(!is.na(fdny$CO_DETECTOR_PRESENT_DESC)),]
co_details = fdny[which(!is.na(fdny$CO_DETECTOR_PRESENT_DESC)),]
View(co_details)
View(co_details)
# Convert all durations to minutes
co_dur_minutes = co_details$TOTAL_INCIDENT_DURATION / 60
View(co_dur_minutes)
twen_thir = co_details$CO_DETECTOR_PRESENT_DESC[which(co_dur_minutes >= 20 & co_dur_minutes <=30)]
View(twen_thir)
twn_thir_ratio = nrow(twen_thir[which(twen_thir == "no")]) / nrow(twen_thir[which(twen_thir == "yes")])
twn_thir_ratio = length(twen_thir[which(twen_thir == "no")]) / length(twen_thir[which(twen_thir == "yes")])
twen_thir[which(twen_thir == "no")]
twn_thir_ratio = length(twen_thir[which(twen_thir == "No")]) / length(twen_thir[which(twen_thir == "Yes")])
thir_four = co_details$CO_DETECTOR_PRESENT_DESC[which(co_dur_minutes >= 30 & co_dur_minutes <=40)]
thir_four_ratio = length(thir_four[which(thir_four == "No")]) / length(thir_four[which(thir_four == "Yes")])
four_fif = co_details$CO_DETECTOR_PRESENT_DESC[which(co_dur_minutes >= 40 & co_dur_minutes <=50)]
four_fif_ratio = length(four_fif[which(four_fif == "No")]) / length(four_fif[which(four_fif == "Yes")])
fif_six = co_details$CO_DETECTOR_PRESENT_DESC[which(co_dur_minutes >= 50 & co_dur_minutes <=60)]
fif_six_ratio = length(fif_six[which(fif_six == "No")]) / length(fif_six[which(fif_six == "Yes")])
six_sev = co_details$CO_DETECTOR_PRESENT_DESC[which(co_dur_minutes >= 60 & co_dur_minutes <=70)]
six_sev_ratio = length(six_sev[which(six_sev == "No")]) / length(six_sev[which(six_sev == "Yes")])
getBins
rbind(twn_thir_ratio, thir_four_ratio, four_fif_ratio, fif_six_ratio, six_sev_ratio)
ratios = rbind(twn_thir_ratio, thir_four_ratio, four_fif_ratio, fif_six_ratio, six_sev_ratio)
?survival
??survival
length(twen_thir)
length(co_details)
nrows(co_details)
nrow(co_details)
totals_ratios = c(length(twen_thir)/num_inc, length(thir_four)/num_inc, length(four_fif)/num_inc,
length(fif_six)/num_inc, length(six_sev)/num_inc)
num_inc = nrow(co_details)
totals_ratios = c(length(twen_thir)/num_inc, length(thir_four)/num_inc, length(four_fif)/num_inc,
length(fif_six)/num_inc, length(six_sev)/num_inc)
cbind(totals_ratios, num_inc)
cbind(totals_ratios, ratios)
model = cbind(totals_ratios, ratios)
l = lm(totals_ratios ~ ratios, model)
model = as.data.frame(model)
l = lm(totals_ratios ~ ratios, model)
summary(l)
predict(l, 39)
predict(l)
model = cbind(totals_ratios, ratios)
model = as.data.frame(model)
View(model)
predict(l, 39, type="terms", terms="totals_ratios")
newData = data.frame(39,"")
predict(l, new_data, type="terms", terms="totals_ratios")
predict(l, newData, type="terms", terms="totals_ratios")
fitted(l)
save.image("C:/Users/travis/Dropbox/Grad School/896/day_1.RData")
predict(l)
summary(l)
predict(l)
model
names(model) = c("totals_ratios", "ratios")
l = lm(totals_ratios ~ ratios, model)
predict(l)
model
thir_nine = co_details$CO_DETECTOR_PRESENT_DESC[which(co_dur_minutes == 39)]
thir_four
thir_nine
summary(l)
plot(l)
plot(l)
fit = lm(totals_ratios ~ ratios + 39, model)
fit = lm(ratios ~ total_ratios, model)
fit = lm(model$ratios ~ model$total_ratios, model)
model$ratios
fit = lm(model$ratios ~ model$totals_ratios, model)
summary(fit)
predict(fit)
coeff(l)
coef(l)
predict(l, data.frame(39),level=0.95, interval = "Confidence")
predict(l, 39,level=0.95, interval = "Confidence")
predict(l, c(10,20,39,45,56),level=0.95, interval = "Confidence")
rat = 0.2578679 + (-0.424055 * 39)
rat
model
scatter.smooth(y=model$totals_ratios, x=model$ratios)
coef(l)
coef(fit)
0.5411455 + (11.5833975 * 39)
0.5411455 + (-1.5833975 * 39)
l = lm(model$totals_ratios ~ model$ratios, model)
predict(l)
chisq.test(model)
t = chisq.test(model)
t$observed
t$expected
t$estimate
View(six_sev)
six_y = six_sev[which(six_sev == "Yes")]
six_N = six_sev[which(six_sev == "No")]
View(cbind(six_y, six_N))
len(six_y)
length(six_y)
length(six_N)
chisq.test(six_sev)
test = six_sev
test[which(test == "Yes")] = 1
test
test[which(test == "Now")] = 0
chisq.test(six_sev)
test = as.numeric(test)
chisq.test(six_sev)
test
test = six_sev
test[which(test == "Yes")] = 1
test[which(test == "No")] = 0
chisq.test(six_sev)
test = as.numeric(test)
chisq.test(six_sev)
test
class(test)
test2 = cbind(co_dur_minutes[which(co_dur_minutes >= 60 & co_dur_minutes <=70)], test)
test2
chisq.test(test2)
chisq.test(test)
t = chisq.test(test)
t$estimate
t$expected
t$observed
t = chisq.test(test2)
t$expected
t
setwd("D:/Dropbox/TDI/project/tdiProjectProposal")
tweets = read.csv("./lang_filter.csv")
tweets = read.csv(file="lang_filter.csv")
tweets = read.csv(file="lang_filter.csv", sep=',')
getwd()
tweets = read.table(file="lang_filter.csv", sep=',')
tweets = read.csv(file="lang_filter.csv", sep=',', stringsAsFactors = T)
list.files()
tweets = read.csv2("lang_filter.csv")
